/*
 * Copyright (c) 2019 Risk Focus Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def jobParametersList = [
  'GENERIC'     : [],
  'K8 Namespace': []
]
def envTypeFolder = ''

def APPLICATION_REPO = "https://github.com/riskfocus/${PROJECT_PREFIX}-infra"
withFolderProperties {
  if (env.CADMIUM_YAML_REPO)
    APPLICATION_REPO = CADMIUM_YAML_REPO
}

def jobParameters = [
  string(name: "NAMESPACE", defaultValue: "", description: "Environment name/Namespace"),
  choice(name: 'ENVIRONMENT_TYPE', choices: GLOBAL_ENABLED_ENVIRONMENT_TYPE, description: 'Platform type'),
  choice(name: 'SCHEDULE_NAME', choices: ['default', '_CUSTOM_', 'new-york-plus-riga-weekdays', 'new-york-weekdays', 'riga-weekdays', 'stop-in-2h', 'stop-in-4h', 'stop-in-8h', 'us-pacific'].join('\n'), description: 'Start/Stop/lifetime schedule to use (defined in DynamoDB). "default" is safe, to provide custom name - select _CUSTOM_ and use SCHEDULE_NAME_CUSTOM'),
  string(name: 'SCHEDULE_NAME_CUSTOM', defaultValue: '', description: 'Provide custom schedule name'),
  string(name: "APPLICATION_REPO", defaultValue: APPLICATION_REPO, description: "Application git repo with cadmium.yaml")
]

jobParameters += jobParametersList.findAll { it.key in GLOBAL_ENABLED_ENVIRONMENT_TYPE }.collect { it.value }.flatten()
properties([parameters(jobParameters)])

if (!(params.NAMESPACE))
  error("Parameter NAMESPACE was not supplied, aborting")

// Script scoped vars
scmVars = null
cadmium = null
flavor_params = [:]
// Default Value
// Value will be overrided with SCHEDULE_NAME_CUSTOM(if it is provided) or
// with value from cadmium.yaml if params.SCHEDULE_NAME == 'default'
schedule = params.SCHEDULE_NAME

ansiColor('xterm') {
  timestamps {
    node() {
      currentBuild.description = "[${params.NAMESPACE}] "

      stage("Reading cadmium.yaml") {
        git url: params.APPLICATION_REPO, credentialsId: "cadmium", branch: "master"
        cadmium = readYaml file: 'cadmium.yaml'
        scmVars = checkout scm
      }

      // TODO feels like OOP
      switch (params.ENVIRONMENT_TYPE) {
        case 'K8 Namespace':
          if (cadmium.version == 0.1) {
            envTypeFolder = 'k8s-jx'
          } else {
            envTypeFolder = 'k8s-namespace'
          }
          break
        case 'GENERIC':
          envTypeFolder = 'generic'
          break
      }

      stage("Creating environment folder") {

        if (params.SCHEDULE_NAME_CUSTOM) {
          schedule = params.SCHEDULE_NAME_CUSTOM
        } else if (cadmium.schedule && schedule == 'default') {
          schedule = cadmium.schedule
        }

        def startJobText = ""
        def stopJobText = ""
        if (!cadmium.settings?.disableRhodiumIntegration) {
          dir("infrastructure_types/${envTypeFolder}") {
            startJobText = readFile 'start_env.groovy'
            stopJobText = readFile 'stop_env.groovy'
          }
        }

        jobDsl targets: "dsl/envFolder.groovy", additionalParameters: [
          NAMESPACE         : params.NAMESPACE,
          ENVIRONMENT_TYPE  : params.ENVIRONMENT_TYPE,
          SCHEDULE_NAME     : schedule,
          APPLICATION_REPO  : params.APPLICATION_REPO,
          REPO_URL          : scmVars.GIT_URL,
          CADMIUM           : cadmium,
          ORIG_PARAMS_MAP   : params,
          FLAVOR_PARAMS_MAPS: flavor_params,
          START_JOB_TEXT    : startJobText,
          STOP_JOB_TEXT     : stopJobText,
        ]
      }

      dir("infrastructure_types/${envTypeFolder}") {
        load 'create.groovy'
      }
    }
  }
}